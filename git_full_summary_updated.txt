
【Git 学習まとめノート】

■ Gitとは？
- ファイルの変更履歴を記録するツール（バージョン管理システム）
- タイムマシンのように過去に戻ったり履歴を見たりできる

■ GitHubとは？
- Gitの履歴をインターネット上で保管・共有できるサービス

■ Gitの基本操作 3ステップ
1. 作業ディレクトリ（Working Directory）
   - ファイルを作成・編集する場所

2. ステージングエリア（Staging Area）
   - 保存する変更を一時的に置く場所
   - コマンド: git add ファイル名

3. リポジトリ（Repository）
   - コミットされた履歴が保管される場所
   - コマンド: git commit -m "メッセージ"

■ ファイルの状態を確認
- git status

■ 履歴を確認
- git log
- git log --oneline（簡略表示）

■ ステージング操作の取り消し
- git restore --staged ファイル名

■ ファイルの変更自体を取り消す（コミット前）
- git restore ファイル名

■ コミットの取り消し
- git reset --soft HEAD~1
  → コミットだけ取消し。変更内容はステージングに残る。
- git reset --mixed HEAD~1
  → コミットもステージングも取り消す（addも取り消される）
- git reset --hard HEAD~1
  → 全て取り消す。⚠️元に戻せない（危険）

■ よく使うオプション
- -m "メッセージ"：コミットメッセージを指定
- -u：git push で upstream 設定をする（以後 push が簡単になる）
- --staged：ステージングエリアだけを操作する指定
- --soft, --mixed, --hard：リセットの強さの違い

■ ブランチ（branch）とは？
- 履歴の分かれ道。作業中の変更を分岐させて、本流に影響を与えずに作業できる
- 実験・新機能追加・修正などに活用できる
- 最終的には main/master にマージ（統合）する

■ ブランチの確認
- git branch
  → 現在のブランチ一覧を表示。* がついているのが現在のブランチ

■ ブランチの作成と切り替え
- git checkout -b ブランチ名
  → 古いけどよく使われる書き方（新しいブランチを作って切り替え）
- git switch -c ブランチ名
  → 新しいGitの推奨方法（-c = create）
- git switch ブランチ名
  → 既存のブランチに切り替え

■ ブランチでの作業
1. ブランチを切り替える
2. ファイルを編集・保存
3. git add ファイル名
4. git commit -m "ブランチでの変更"

■ マージ（merge）
- 別のブランチの変更を現在のブランチに統合する
- 例：test-branchの内容をmainに統合するには：

  git switch main
  git merge test-branch

- 競合（conflict）がなければ自動でマージされる

■ ブランチの削除
- git branch -d ブランチ名
  → マージ済みのブランチを安全に削除
- git branch -D ブランチ名
  → 強制削除（未マージでも削除、⚠️初心者は注意）

■ ブランチ操作まとめ

| 操作 | コマンド | 備考 |
|------|----------|------|
| 一覧表示 | git branch | 今あるブランチと現在位置を確認 |
| 新規作成＋切替 | git switch -c 名前 / git checkout -b 名前 | どちらでもOK |
| 切り替え | git switch 名前 | ブランチ移動 |
| マージ | git merge 名前 | 現在のブランチに統合 |
| 削除（安全） | git branch -d 名前 | マージ済みのみ削除可 |
| 削除（強制） | git branch -D 名前 | マージしてなくても削除可（注意） |

■ オプションまとめ

| オプション | 意味 |
|------------|------|
| -b | （checkout専用）新規ブランチを作る |
| -c | （switch専用）新規ブランチを作る |
| -d | ブランチを削除（マージ済み限定） |
| -D | ブランチを強制削除（マージ関係なく） |

■ git reset とは？
- ステージングやコミットを「なかったこと」にして、履歴を巻き戻すコマンド
- オプションにより、どこまで戻すかを選べる

■ よく使うオプションと違い

| コマンド | 意味 | 対象 |
|----------|------|------|
| git reset --soft HEAD~1 | コミットだけ取消。ステージングは残す | リポジトリのみ巻き戻す |
| git reset --mixed HEAD~1 | コミットとステージングを取消。変更内容は残る | リポジトリ＋ステージング |
| git reset --hard HEAD~1 | すべて取り消す（⚠️変更内容も消える） | リポジトリ＋ステージング＋作業内容 |

■ 状態別比較表

| 状態 | soft | mixed | hard |
|------|------|--------|------|
| コミット履歴 | ❌ 削除 | ❌ 削除 | ❌ 削除 |
| ステージング（git add） | ✅ 残る | ❌ 解除 | ❌ 消える |
| 作業ディレクトリの変更 | ✅ 残る | ✅ 残る | ❌ 消える |

■ git restore との違い

| コマンド | 主に使う場面 | 何を戻す？ |
|----------|--------------|-------------|
| git restore --staged ファイル | ステージングだけ戻す | git add の取り消し |
| git restore ファイル | 作業中の変更を取り消す | 作業ディレクトリのファイル内容を元に戻す |
| git reset --soft HEAD~1 | コミットを戻す（ステージングは維持） | 履歴だけを巻き戻す |
| git reset --hard HEAD~1 | すべてを元に戻す（⚠️データ消失） | 履歴・ステージング・作業全て |

■ 注意
- git reset --hard は完全に履歴と変更内容を消すため、使用時は慎重に！
